# ==============================================================================
# FastAPI在庫管理システム - docker-compose.yml (学習用コメント版)
# ==============================================================================
# このファイルは Docker Compose の設定ファイルです。
# 複数のDockerコンテナを定義し、それらを連携させて動作させることができます。
# 今回は FastAPI アプリケーションと MySQL データベースを連携させています。

# ------------------------------------------------------------------------------
# Docker Compose ファイルのバージョン指定
# ------------------------------------------------------------------------------
# version: Docker Compose ファイルの形式バージョンを指定
# '3.8': 比較的新しいバージョンで、多くの機能をサポート
# バージョンによって使用可能な機能が異なるため重要
# 参考: https://docs.docker.com/compose/compose-file/
version: '3.8'

# ==============================================================================
# サービス定義セクション
# ==============================================================================
# services: アプリケーションを構成する各サービス（コンテナ）を定義
# 今回は mysql と fastapi の2つのサービスを定義
services:

  # ----------------------------------------------------------------------------
  # MySQL データベースサービス
  # ----------------------------------------------------------------------------
  # サービス名: mysql
  # 他のサービスからは、この名前（mysql）でアクセス可能
  # 例: mysql://inventory_user:password@mysql:3306/inventory
  mysql:
    # --------------------------------------------------
    # ベースイメージの指定
    # --------------------------------------------------
    # image: 使用するDockerイメージを指定
    # mysql:8.0: MySQL公式の8.0バージョンを使用
    # 8.0を選ぶ理由：
    # - 安定版で多くの機能をサポート
    # - パフォーマンスが向上
    # - JSON型のサポートが充実
    image: mysql:8.0
    
    # --------------------------------------------------
    # コンテナ名の指定
    # --------------------------------------------------
    # container_name: 作成されるコンテナの名前を明示的に指定
    # 指定しない場合は「ディレクトリ名_サービス名_番号」になる
    # 明示的に指定することで識別しやすくなる
    container_name: inventory_mysql
    
    # --------------------------------------------------
    # 環境変数の設定
    # --------------------------------------------------
    # environment: コンテナ内で使用される環境変数を定義
    # MySQLコンテナの初期設定に必要な環境変数群
    environment:
      # MYSQL_ROOT_PASSWORD: MySQLのrootユーザーのパスワード
      # セキュリティ上重要：本番環境では複雑なパスワードを使用
      MYSQL_ROOT_PASSWORD: rootpassword
      
      # MYSQL_DATABASE: 初期作成されるデータベース名
      # コンテナ起動時に自動的に作成される
      MYSQL_DATABASE: inventory
      
      # MYSQL_USER: アプリケーション専用のユーザー名
      # rootユーザーを直接使用せず、専用ユーザーを作成（セキュリティのベストプラクティス）
      MYSQL_USER: inventory_user
      
      # MYSQL_PASSWORD: 上記ユーザーのパスワード
      # このユーザーは MYSQL_DATABASE で指定されたDBに対する全権限を持つ
      MYSQL_PASSWORD: inventory_password
    
    # --------------------------------------------------
    # ポートマッピング
    # --------------------------------------------------
    # ports: ホスト（ローカルマシン）とコンテナ間のポートマッピング
    # "ホストポート:コンテナポート" の形式
    # "3306:3306": ホストの3306ポートをコンテナの3306ポートにマッピング
    # これにより localhost:3306 でMySQLにアクセス可能
    # 開発時にはMySQLクライアントから直接接続できて便利
    ports:
      - "3306:3306"
    
    # --------------------------------------------------
    # ボリュームマウント
    # --------------------------------------------------
    # volumes: データの永続化とファイル共有を設定
    volumes:
      # mysql_data:/var/lib/mysql
      # - mysql_data: 名前付きボリューム（下部のvolumesセクションで定義）
      # - /var/lib/mysql: MySQLがデータを保存するディレクトリ
      # データベースの内容がコンテナの削除後も保持される（永続化）
      - mysql_data:/var/lib/mysql
      
      # ./db/products.sql:/docker-entrypoint-initdb.d/products.sql
      # - ./db/products.sql: ホスト側のSQLファイル
      # - /docker-entrypoint-initdb.d/: MySQL初期化用ディレクトリ
      # このディレクトリのSQLファイルは初回起動時に自動実行される
      # テーブル作成やサンプルデータ投入に使用
      - ./db/products.sql:/docker-entrypoint-initdb.d/products.sql
    
    # --------------------------------------------------
    # ネットワーク設定
    # --------------------------------------------------
    # networks: コンテナが参加するネットワークを指定
    # 同じネットワークに属するコンテナ同士は通信可能
    # サービス名（mysql, fastapi）で名前解決される
    networks:
      - inventory_network

  # ----------------------------------------------------------------------------
  # FastAPI アプリケーションサービス
  # ----------------------------------------------------------------------------
  # サービス名: fastapi
  # Webアプリケーションを実行するサービス
  fastapi:
    # --------------------------------------------------
    # イメージのビルド設定
    # --------------------------------------------------
    # build: Dockerfileからイメージをビルドする際の設定
    # . : 現在のディレクトリのDockerfileを使用
    # 既存のイメージを使うのではなく、ソースコードからビルド
    build: .
    
    # --------------------------------------------------
    # コンテナ名の指定
    # --------------------------------------------------
    container_name: inventory_fastapi
    
    # --------------------------------------------------
    # ポートマッピング
    # --------------------------------------------------
    ports:
      # "8000:8000": FastAPI（uvicorn）のメインポート
      # ホストの8000ポートでWebアプリケーションにアクセス可能
      # http://localhost:8000 でAPIにアクセス
      - "8000:8000"
      
      # "5678:5678": デバッグ用ポート（debugpy）
      # VSCodeなどのエディタからリモートデバッグで接続
      # 開発時のみ必要（本番環境では削除推奨）
      - "5678:5678"  # Debug port
    
    # --------------------------------------------------
    # ボリュームマウント
    # --------------------------------------------------
    volumes:
      # .:/app : ホストのプロジェクトディレクトリをコンテナの/appにマウント
      # ソースコードの変更がリアルタイムでコンテナに反映される
      # --reloadオプションと組み合わせることでホットリロードが可能
      # 開発効率が大幅に向上
      - .:/app
    
    # --------------------------------------------------
    # サービス間の依存関係
    # --------------------------------------------------
    # depends_on: 他のサービスの起動を待つ設定
    # この例では、mysqlサービスが起動してからfastapiサービスを起動
    depends_on:
      mysql:
        # condition: 依存サービスの待機条件
        # service_started: サービスが開始されるまで待機
        # service_healthy: ヘルスチェックが成功するまで待機（より厳密）
        condition: service_started
    
    # --------------------------------------------------
    # 環境変数の設定
    # --------------------------------------------------
    # FastAPIアプリケーションの動作に必要な環境変数を設定
    environment:
      # DATABASE_URL: データベース接続文字列
      # mysql+aiomysql://: 非同期MySQL接続用のドライバーを指定
      # inventory_user:inventory_password: 認証情報
      # @mysql:3306: ホスト名とポート（mysqlはサービス名で名前解決される）
      # /inventory: データベース名
      - DATABASE_URL=mysql+aiomysql://inventory_user:inventory_password@mysql:3306/inventory
      
      # PYTHONPATH: Pythonモジュールの検索パス
      # /app: コンテナ内のアプリケーションルートディレクトリ
      # これにより api.main などの相対インポートが正常に動作
      - PYTHONPATH=/app
    
    # --------------------------------------------------
    # ネットワーク設定
    # --------------------------------------------------
    # mysqlサービスと同じネットワークに参加
    # これにより fastapi -> mysql への通信が可能
    networks:
      - inventory_network
    
    # --------------------------------------------------
    # カスタムコマンドの指定
    # --------------------------------------------------
    # command: コンテナ起動時に実行するコマンドを上書き
    # Dockerfileの CMD を置き換える
    # 各パラメータの詳細説明：
    # - python -m debugpy: デバッガーを起動
    # - --listen 0.0.0.0:5678: デバッガーの待機設定
    # - -m uvicorn: uvicornサーバーをモジュールとして実行
    # - api.main:app: アプリケーションの場所
    # - --host 0.0.0.0: 全てのインターフェースで待機
    # - --port 8000: 待機ポート
    # - --reload: ファイル変更時の自動リロード
    command: python -m debugpy --listen 0.0.0.0:5678 -m uvicorn api.main:app --host 0.0.0.0 --port 8000 --reload

# ==============================================================================
# ボリューム定義セクション
# ==============================================================================
# volumes: 名前付きボリュームを定義
# コンテナが削除されてもデータが保持される
volumes:
  # mysql_data: MySQLのデータファイル用ボリューム
  # ボリューム名のみ指定（詳細設定はデフォルト）
  # Docker が自動的に管理する場所にデータが保存される
  # 通常は /var/lib/docker/volumes/ 以下
  mysql_data:

# ==============================================================================
# ネットワーク定義セクション
# ==============================================================================
# networks: カスタムネットワークを定義
# 同じネットワーク内のコンテナは互いに通信可能
networks:
  # inventory_network: このアプリケーション専用のネットワーク
  inventory_network:
    # driver: ネットワークドライバーの種類
    # bridge: 同一ホスト内でのコンテナ間通信用（デフォルト）
    # 他のオプション: host, overlay, none など
    driver: bridge

# ==============================================================================
# Docker Compose の使用方法
# ==============================================================================
# 基本的なコマンド：
# 
# 1. サービスの起動:
#    docker-compose up
#    - フォアグラウンドで実行（ログが表示される）
#    
#    docker-compose up -d
#    - バックグラウンドで実行
#    
#    docker-compose up --build
#    - イメージを再ビルドしてから起動
# 
# 2. サービスの停止:
#    docker-compose down
#    - コンテナを停止・削除
#    
#    docker-compose down -v
#    - ボリュームも削除
# 
# 3. ログの確認:
#    docker-compose logs
#    - 全サービスのログを表示
#    
#    docker-compose logs fastapi
#    - 特定サービスのログを表示
# 
# 4. サービスの再起動:
#    docker-compose restart fastapi
#    - 特定サービスのみ再起動
# 
# 5. 実行中のコンテナに接続:
#    docker-compose exec fastapi bash
#    - fastapiコンテナのシェルに接続
# 
# ==============================================================================
# 本番環境での考慮事項
# ==============================================================================
# 1. セキュリティ:
#    - デバッグポート（5678）は公開しない
#    - 強固なパスワードを使用
#    - 環境変数をファイルから読み込み（.env）
# 
# 2. パフォーマンス:
#    - --reload オプションを削除
#    - 本番用のuvicorn設定を使用
#    - リソース制限を設定（CPU、メモリ）
# 
# 3. データ管理:
#    - データベースバックアップの自動化
#    - ボリュームの定期的なバックアップ
# 
# 4. 監視・ログ:
#    - ログ集約システムの導入
#    - ヘルスチェックの設定
#    - メトリクス収集の設定
# 
# ==============================================================================